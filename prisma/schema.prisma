// Svampen Booking System - Prisma Schema
// Database design for bil- og båtvask booking platform med multi-kjøretøy støtte

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Bruker model med roller og autentisering
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  role        UserRole @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relasjon til bookings
  bookings    Booking[]
  
  @@map("users")
}

// Brukerroller
enum UserRole {
  USER
  ADMIN
}

// Tjenester med kategorier
model Service {
  id          String          @id @default(cuid())
  name        String          @unique
  description String          @db.Text
  duration    Int             // Varighet i minutter
  category    ServiceCategory @default(MAIN)
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // Relasjon til priser og bookings
  servicePrices   ServicePrice[]
  bookingServices BookingService[]
  
  @@map("services")
}

enum ServiceCategory {
  MAIN      // Hovedpakker (Mini, Medium, Eksklusiv)
  ADDON     // Tilleggstjenester (Seterens, Tepperens, etc.)
  SPECIAL   // Spesialtjenester (Rubbing, Lyktepolering, etc.)
}

// Kjøretøy typer for prising
model VehicleType {
  id          String   @id @default(cuid())
  name        String   @unique // "Vanlig bil", "SUV", "Kassebil", etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relasjon til priser og bookings
  servicePrices   ServicePrice[]
  bookingVehicles BookingVehicle[]
  
  @@map("vehicle_types")
}

// Prismatrise: Service x VehicleType
model ServicePrice {
  id            String      @id @default(cuid())
  serviceId     String
  vehicleTypeId String
  price         Decimal     @db.Decimal(10, 2)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relasjoner
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id], onDelete: Cascade)
  
  @@unique([serviceId, vehicleTypeId])
  @@map("service_prices")
}

// Hovedbooking model - redesignet for multi-kjøretøy
model Booking {
  id              String        @id @default(cuid())
  userId          String
  
  // Booking detaljer
  scheduledDate   DateTime
  scheduledTime   DateTime
  totalDuration   Int           // Total varighet i minutter
  estimatedEnd    DateTime
  
  // Totaler
  totalPrice      Decimal       @db.Decimal(10, 2)
  
  // Kunde informasjon
  customerNotes   String?       @db.Text
  
  // Status tracking
  status          BookingStatus @default(PENDING)
  
  // Betaling og faktura
  paymentStatus   PaymentStatus @default(UNPAID)
  paymentMethod   String?       // "cash", "card", "invoice", "vipps", etc.
  completedAt     DateTime?     // Når jobben ble fullført
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relasjoner
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingVehicles BookingVehicle[]
  invoices        Invoice[]
  
  @@map("bookings")
}

// Kjøretøy i bestillingen
model BookingVehicle {
  id              String        @id @default(cuid())
  bookingId       String
  vehicleTypeId   String
  vehicleInfo     String?       // Bilmerke, modell, registreringsnummer
  vehicleNotes    String?       // Spesielle merknader for dette kjøretøyet
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relasjoner
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  vehicleType     VehicleType   @relation(fields: [vehicleTypeId], references: [id])
  bookingServices BookingService[]
  
  @@map("booking_vehicles")
}

// Tjenester for hver kjøretøy
model BookingService {
  id                String        @id @default(cuid())
  bookingVehicleId  String
  serviceId         String
  quantity          Int           @default(1)
  unitPrice         Decimal       @db.Decimal(10, 2)
  totalPrice        Decimal       @db.Decimal(10, 2)
  duration          Int           // Varighet for denne tjenesten i minutter
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relasjoner
  bookingVehicle    BookingVehicle @relation(fields: [bookingVehicleId], references: [id], onDelete: Cascade)
  service           Service       @relation(fields: [serviceId], references: [id])
  
  @@map("booking_services")
}

// Booking statuser
enum BookingStatus {
  PENDING     // Venter på bekreftelse
  CONFIRMED   // Bekreftet
  IN_PROGRESS // Pågår
  COMPLETED   // Fullført
  CANCELLED   // Avbestilt
  NO_SHOW     // Møtte ikke opp
}

// Betalingsstatus
enum PaymentStatus {
  UNPAID      // Ikke betalt
  PARTIAL     // Delvis betalt
  PAID        // Betalt
  REFUNDED    // Refundert
  OVERDUE     // Forfalt
}

// Faktura model
model Invoice {
  id              String        @id @default(cuid())
  bookingId       String
  invoiceNumber   String        @unique // Løpenummer: INV-2025-0001
  
  // Beløp
  amount          Decimal       @db.Decimal(10, 2)
  taxAmount       Decimal       @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal       @db.Decimal(10, 2)
  
  // Status
  status          InvoiceStatus @default(SENT)
  
  // Datoer
  issuedDate      DateTime      @default(now())
  dueDate         DateTime      // Forfallsdato
  paidDate        DateTime?     // Når fakturaen ble betalt
  
  // Merknader
  notes           String?       @db.Text
  adminNotes      String?       @db.Text // Interne notater
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relasjoner
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  @@map("invoices")
}

// Faktura status
enum InvoiceStatus {
  DRAFT       // Utkast
  SENT        // Sendt til kunde
  VIEWED      // Sett av kunde
  PAID        // Betalt
  OVERDUE     // Forfalt
  CANCELLED   // Kansellert
}

// Tidslots for tilgjengelighet
model TimeSlot {
  id          String   @id @default(cuid())
  date        DateTime // Datoen for dette tidssporet
  startTime   DateTime // Start tid
  endTime     DateTime // Slutt tid
  isAvailable Boolean  @default(true)
  isHoliday   Boolean  @default(false)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([date, startTime])
  @@map("time_slots")
}

// Admin innstillinger for system konfigurasjon
model AdminSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admin_settings")
}