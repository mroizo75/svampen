// Svampen Booking System - Prisma Schema
// Database design for bil- og båtvask booking platform med multi-kjøretøy støtte

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Bruker model med roller og autentisering
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  role        UserRole @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relasjon til bookings
  bookings    Booking[]
  
  // Relasjon til bedrifter (som kontaktperson)
  companies   Company[]
  
  // Relasjon til utstyrssertifiseringer
  equipmentCertifications UserEquipmentCertification[]
  
  @@map("users")
}

// Brukerroller
enum UserRole {
  USER      // Kunde - kun egne bookinger
  ANSATT    // Ansatt - kan se kalender og alle bookinger, registrere bookinger
  WORKSHOP  // Verksted - kun lesetilgang til kalender
  ADMIN     // Administrator - full tilgang
}

// Bedriftskunder med fasteavtaler
model Company {
  id                  String   @id @default(cuid())
  name                String   // Bedriftsnavn
  orgNumber           String?  @unique // Organisasjonsnummer
  
  // Kontaktinformasjon
  contactPersonId     String?  // Relasjon til User
  contactPerson       User?    @relation(fields: [contactPersonId], references: [id], onDelete: SetNull)
  contactEmail        String   // Primær e-post for bedriften
  contactPhone        String?  // Telefon
  
  // Adresse
  address             String?
  postalCode          String?
  city                String?
  
  // Avtaledetaljer
  contractStartDate   DateTime? // Avtalens startdato
  contractEndDate     DateTime? // Avtalens sluttdato (null = løpende)
  discountPercent     Decimal?  @default(0) @db.Decimal(5, 2) // Rabatt i prosent
  specialTerms        String?   @db.Text // Spesielle avtalevilkår
  paymentTerms        String?   // Betalingsvilkår (f.eks. "30 dager netto")
  invoiceEmail        String?   // E-post for faktura (hvis forskjellig fra kontakt)
  
  // Status
  isActive            Boolean   @default(true)
  notes               String?   @db.Text // Administrative notater
  
  // Timestamps
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relasjoner
  bookings            Booking[]
  bookingTemplates    BookingTemplate[]
  
  @@map("companies")
}

// Booking-maler for bedriftskunder med faste avtaler
model BookingTemplate {
  id                  String   @id @default(cuid())
  companyId           String
  company             Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Mal-detaljer
  name                String   // Beskrivende navn (f.eks. "Mandag morgen vask")
  description         String?  @db.Text
  
  // Tidspunkt
  dayOfWeek           Int?     // 0-6 (0 = søndag, 1 = mandag, etc.) for ukentlig
  dayOfMonth          Int?     // 1-31 for månedlig
  time                String   // HH:mm format (f.eks. "09:00")
  
  // Frekvens
  frequency           TemplateFrequency @default(WEEKLY)
  
  // Kjøretøy og tjenester (JSON for fleksibilitet)
  // Format: [{ vehicleTypeId: string, vehicleInfo: string, serviceIds: string[] }]
  vehiclesConfig      Json
  
  // Notater
  defaultNotes        String?  @db.Text
  
  // Status og innstillinger
  isActive            Boolean  @default(true)
  autoGenerate        Boolean  @default(false) // Auto-generer bookinger?
  generateDaysAhead   Int?     @default(30) // Hvor mange dager fremover skal bookinger genereres?
  lastGeneratedDate   DateTime? // Siste gang bookinger ble generert
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("booking_templates")
}

enum TemplateFrequency {
  WEEKLY   // Hver uke
  MONTHLY  // Hver måned
  CUSTOM   // Egendefinert (for fremtidig bruk)
}

// Tjenester med kategorier
model Service {
  id          String          @id @default(cuid())
  name        String          @unique
  description String          @db.Text
  duration    Int             // Varighet i minutter
  category    ServiceCategory @default(MAIN)
  isActive    Boolean         @default(true)
  isAdminOnly Boolean         @default(false) // Kun synlig for admin (bedriftspakker)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // Relasjon til priser og bookings
  servicePrices   ServicePrice[]
  bookingServices BookingService[]
  
  @@map("services")
}

enum ServiceCategory {
  MAIN      // Hovedpakker (Mini, Medium, Eksklusiv)
  ADDON     // Tilleggstjenester (Seterens, Tepperens, etc.)
  SPECIAL   // Spesialtjenester (Rubbing, Lyktepolering, etc.)
  DEALER    // Bilforhandler-pakker (kun admin)
}

// Kjøretøy typer for prising
model VehicleType {
  id          String   @id @default(cuid())
  name        String   @unique // "Vanlig bil", "SUV", "Kassebil", etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relasjon til priser og bookings
  servicePrices   ServicePrice[]
  bookingVehicles BookingVehicle[]
  
  @@map("vehicle_types")
}

// Prismatrise: Service x VehicleType
model ServicePrice {
  id            String      @id @default(cuid())
  serviceId     String
  vehicleTypeId String
  price         Decimal     @db.Decimal(10, 2)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relasjoner
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id], onDelete: Cascade)
  
  @@unique([serviceId, vehicleTypeId])
  @@map("service_prices")
}

// Hovedbooking model - redesignet for multi-kjøretøy
model Booking {
  id              String        @id @default(cuid())
  userId          String
  companyId       String?       // Relasjon til bedrift (hvis bedriftsbooking)
  
  // Booking detaljer
  scheduledDate   DateTime
  scheduledTime   DateTime
  totalDuration   Int           // Total varighet i minutter
  estimatedEnd    DateTime
  
  // Totaler
  totalPrice      Decimal       @db.Decimal(10, 2)
  
  // Kunde informasjon
  customerNotes   String?       @db.Text
  
  // Status tracking
  status          BookingStatus @default(CONFIRMED)
  
  // Betaling og faktura
  paymentStatus   PaymentStatus @default(UNPAID)
  paymentMethod   String?       // "cash", "card", "invoice", "vipps", etc.
  completedAt     DateTime?     // Når jobben ble fullført
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relasjoner
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  company         Company?      @relation(fields: [companyId], references: [id], onDelete: SetNull)
  bookingVehicles BookingVehicle[]
  invoices        Invoice[]
  
  @@map("bookings")
}

// Kjøretøy i bestillingen
model BookingVehicle {
  id              String        @id @default(cuid())
  bookingId       String
  vehicleTypeId   String
  vehicleInfo     String?       // Bilmerke, modell, registreringsnummer
  vehicleNotes    String?       // Spesielle merknader for dette kjøretøyet
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relasjoner
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  vehicleType     VehicleType   @relation(fields: [vehicleTypeId], references: [id])
  bookingServices BookingService[]
  
  @@map("booking_vehicles")
}

// Tjenester for hver kjøretøy
model BookingService {
  id                String        @id @default(cuid())
  bookingVehicleId  String
  serviceId         String
  quantity          Int           @default(1)
  unitPrice         Decimal       @db.Decimal(10, 2)
  totalPrice        Decimal       @db.Decimal(10, 2)
  duration          Int           // Varighet for denne tjenesten i minutter
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relasjoner
  bookingVehicle    BookingVehicle @relation(fields: [bookingVehicleId], references: [id], onDelete: Cascade)
  service           Service       @relation(fields: [serviceId], references: [id])
  
  @@map("booking_services")
}

// Booking statuser
enum BookingStatus {
  PENDING     // Venter på bekreftelse
  CONFIRMED   // Bekreftet
  IN_PROGRESS // Pågår
  COMPLETED   // Fullført
  CANCELLED   // Avbestilt
  NO_SHOW     // Møtte ikke opp
}

// Betalingsstatus
enum PaymentStatus {
  UNPAID      // Ikke betalt
  PARTIAL     // Delvis betalt
  PAID        // Betalt
  REFUNDED    // Refundert
  OVERDUE     // Forfalt
}

// Faktura model
model Invoice {
  id              String        @id @default(cuid())
  bookingId       String
  invoiceNumber   String        @unique // Løpenummer: INV-2025-0001
  
  // Tripletex integrasjon
  tripletexId     Int?          @unique // ID fra Tripletex
  tripletexUrl    String?       // Link til faktura i Tripletex
  tripletexPdfUrl String?       // PDF download URL
  tripletexVoucher Int?         // Bilag-nummer i Tripletex
  
  // Beløp
  amount          Decimal       @db.Decimal(10, 2)
  taxAmount       Decimal       @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal       @db.Decimal(10, 2)
  
  // Status
  status          InvoiceStatus @default(DRAFT)
  
  // Datoer
  issuedDate      DateTime      @default(now())
  dueDate         DateTime      // Forfallsdato
  paidDate        DateTime?     // Når fakturaen ble betalt
  sentDate        DateTime?     // Når fakturaen ble sendt til kunde
  
  // Merknader
  notes           String?       @db.Text
  adminNotes      String?       @db.Text // Interne notater
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relasjoner
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  @@map("invoices")
}

// Faktura status
enum InvoiceStatus {
  DRAFT       // Utkast
  SENT        // Sendt til kunde
  VIEWED      // Sett av kunde
  PAID        // Betalt
  OVERDUE     // Forfalt
  CANCELLED   // Kansellert
}

// Tidslots for tilgjengelighet
model TimeSlot {
  id          String   @id @default(cuid())
  date        DateTime // Datoen for dette tidssporet
  startTime   DateTime // Start tid
  endTime     DateTime // Slutt tid
  isAvailable Boolean  @default(true)
  isHoliday   Boolean  @default(false)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([date, startTime])
  @@map("time_slots")
}

// Admin innstillinger for system konfigurasjon
model AdminSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admin_settings")
}

// Lisenssystem
model License {
  id                String        @id @default(cuid())
  licenseKey        String        @unique  // Unik lisenskode fra kksas.no
  validationToken   String                 // Token for validering mot kksas.no
  customerName      String?                // Kundens navn
  customerDomain    String?                // Tillatt domene (f.eks. "svampen.no")
  isActive          Boolean       @default(true)
  expiresAt         DateTime?              // Utløpsdato (null = ingen utløp)
  lastValidatedAt   DateTime?              // Sist validert mot kksas.no
  features          String        @db.Text // JSON string med aktive features
  maxBookingsPerMonth Int?                 // Maks bookinger per måned (null = ubegrenset)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relasjon til validering historikk
  validationLogs    LicenseValidationLog[]
  
  @@map("licenses")
}

// Logg for lisensvalidering
model LicenseValidationLog {
  id          String   @id @default(cuid())
  licenseId   String
  license     License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  isValid     Boolean
  responseData String? @db.Text // JSON data fra kksas.no
  errorMessage String? @db.Text
  validatedAt DateTime @default(now())
  
  @@map("license_validation_logs")
}

// ========================================
// UTSTYRSSPESIFIKK OPPLÆRING
// I henhold til Arbeidsmiljøloven § 4-5
// ========================================

// Utstyr som krever opplæring
model Equipment {
  id                    String   @id @default(cuid())
  name                  String   // Navn på utstyr (f.eks. "Polérmaskin X2000")
  category              String   // Kategori (f.eks. "Polérmaskin", "Løfteutstyr", "Kjemikalie")
  manufacturer          String?  // Produsent
  model                 String?  // Modellnummer
  serialNumber          String?  // Serienummer
  
  // Beskrivelse og dokumentasjon
  description           String?  @db.Text
  location              String?  // Hvor utstyret befinner seg
  purchaseDate          DateTime?
  warrantyExpiresAt     DateTime?
  
  // Opplæringskrav
  requiresTraining      Boolean  @default(true)
  trainingValidityDays  Int?     // Hvor lenge opplæring er gyldig (null = evig)
  minimumTrainingLevel  TrainingLevel @default(BASIC)
  
  // Sikkerhetsinfo
  riskAssessment        String?  @db.Text // Risikovurdering
  safetyInstructions    String?  @db.Text // Sikkerhetsinstruksjoner
  emergencyProcedures   String?  @db.Text // Nødprosedyrer
  
  // Dokumenter (JSON array med filstier/URLs)
  documents             Json?    // [{name: "", url: "", type: "manual|certificate|..."}]
  
  // Status
  isActive              Boolean  @default(true)
  requiresInspection    Boolean  @default(false)
  nextInspectionDate    DateTime?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relasjoner
  trainingSessions      EquipmentTraining[]
  userCertifications    UserEquipmentCertification[]
  maintenanceLogs       EquipmentMaintenanceLog[]
  
  @@map("equipment")
}

// Opplæringsnivå
enum TrainingLevel {
  BASIC           // Grunnleggende - kan bruke under veiledning
  INTERMEDIATE    // Selvstendig bruk
  ADVANCED        // Avansert bruk
  TRAINER         // Kan trene andre (intern opplærer)
  SUPPLIER        // Leverandøropplæring (høyeste nivå)
}

// Opplæringsøkter/kurs
model EquipmentTraining {
  id                    String   @id @default(cuid())
  equipmentId           String
  equipment             Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  
  // Kursdetaljer
  title                 String   // Kurstittel
  description           String?  @db.Text
  trainingLevel         TrainingLevel
  
  // Leverandør/instruktør
  providerId            String?
  provider              TrainingProvider? @relation(fields: [providerId], references: [id], onDelete: SetNull)
  instructorName        String?  // Navn på instruktør
  instructorCompany     String?  // Firma instruktør jobber for
  
  // Dato og varighet
  trainingDate          DateTime
  duration              Int?     // Varighet i timer
  location              String?  // Sted for opplæring
  
  // Gyldighet
  validityDays          Int?     // Hvor lenge sertifikat er gyldig
  
  // Deltakere og dokumentasjon
  maxParticipants       Int?
  documents             Json?    // [{name: "", url: "", type: ""}]
  notes                 String?  @db.Text
  
  // Status
  isCompleted           Boolean  @default(false)
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relasjoner
  certifications        UserEquipmentCertification[]
  
  @@map("equipment_training")
}

// Leverandører av opplæring
model TrainingProvider {
  id                    String   @id @default(cuid())
  name                  String   // Leverandørnavn
  orgNumber             String?  @unique
  contactPerson         String?
  contactEmail          String?
  contactPhone          String?
  address               String?
  
  // Akkreditering
  accreditations        Json?    // [{type: "", number: "", expiresAt: ""}]
  
  // Status
  isActive              Boolean  @default(true)
  notes                 String?  @db.Text
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relasjoner
  trainingSessions      EquipmentTraining[]
  
  @@map("training_providers")
}

// Brukerens sertifiseringer/godkjenninger på utstyr
model UserEquipmentCertification {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipmentId           String
  equipment             Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  trainingId            String?
  training              EquipmentTraining? @relation(fields: [trainingId], references: [id], onDelete: SetNull)
  
  // Sertifikatdetaljer
  certificationLevel    TrainingLevel
  certifiedBy           String   // Hvem ga sertifikatet (navn)
  certifiedByUserId     String?  // ID til intern bruker som ga opplæring (for opplæringstrapp)
  certificationDate     DateTime
  expiresAt             DateTime? // Når det utløper (null = aldri)
  
  // Dokumentasjon
  certificateNumber     String?  // Sertifikatnummer
  certificateDocument   String?  // URL/sti til PDF-sertifikat
  notes                 String?  @db.Text
  
  // Status
  isActive              Boolean  @default(true)
  revokedAt             DateTime?
  revokedBy             String?  // Hvem tilbakekalte
  revokedReason         String?  @db.Text
  
  // Påminnelser
  reminderSentAt        DateTime? // Siste påminnelse om fornyelse
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@unique([userId, equipmentId, certificationDate])
  @@map("user_equipment_certifications")
}

// Vedlikeholdslogg for utstyr
model EquipmentMaintenanceLog {
  id                    String   @id @default(cuid())
  equipmentId           String
  equipment             Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  
  // Vedlikeholdsdetaljer
  type                  MaintenanceType
  description           String   @db.Text
  performedBy           String   // Hvem utførte vedlikeholdet
  performedDate         DateTime
  
  // Status
  cost                  Decimal? @db.Decimal(10, 2)
  nextMaintenanceDate   DateTime?
  
  // Dokumentasjon
  documents             Json?    // [{name: "", url: ""}]
  notes                 String?  @db.Text
  
  // Timestamps
  createdAt             DateTime @default(now())
  
  @@map("equipment_maintenance_logs")
}

// Vedlikeholdstype
enum MaintenanceType {
  INSPECTION          // Inspeksjon
  REPAIR              // Reparasjon
  PREVENTIVE          // Forebyggende vedlikehold
  CALIBRATION         // Kalibrering
  CLEANING            // Rengjøring
  REPLACEMENT         // Utskifting av deler
  OTHER               // Annet
}